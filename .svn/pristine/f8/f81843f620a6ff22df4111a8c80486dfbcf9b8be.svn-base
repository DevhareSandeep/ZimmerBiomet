package sg.totalebizsolutions.zimmer.views.home;

import android.content.Context;
import android.databinding.DataBindingUtil;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.inputmethod.EditorInfo;

import com.google.common.base.Objects;

import java.util.List;

import jp.wasabeef.recyclerview.animators.FadeInUpAnimator;
import sg.totalebizsolutions.foundation.util.Validation;
import sg.totalebizsolutions.foundation.view.navigation.NavigationItemFragment;
import sg.totalebizsolutions.foundation.widgets.SimpleTextWatch;
import sg.totalebizsolutions.zimmer.R;
import sg.totalebizsolutions.zimmer.core.Callback;
import sg.totalebizsolutions.zimmer.core.ZimmerServices;
import sg.totalebizsolutions.zimmer.core.file.File;
import sg.totalebizsolutions.zimmer.core.file.FileConstants;
import sg.totalebizsolutions.zimmer.databinding.HomeFragmentBinding;
import sg.totalebizsolutions.zimmer.misc.widgets.LinearDividerItemDecoration;
import sg.totalebizsolutions.zimmer.views.categories.CategoriesFragment;
import sg.totalebizsolutions.zimmer.views.categories.CategoryMetaData;
import sg.totalebizsolutions.zimmer.views.explorer.MainExplorerFragment;
import sg.totalebizsolutions.zimmer.views.explorer.OnFileClickListener;
import sg.totalebizsolutions.zimmer.views.explorer.file.BrowserRecyclerAdapter;
import sg.totalebizsolutions.zimmer.views.explorer.file.details.FileFragment;
import sg.totalebizsolutions.zimmer.views.home.HomeCategoryRecyclerAdapter.HomeCategoryUpdateListener;

public class HomeFragment extends NavigationItemFragment
{
  /* Properties */

  private static final String STATE_SEARCH_TEXT = "searchText";

  private HomeFragmentBinding m_binding;
  private BrowserRecyclerAdapter m_adapter;

  private List<File> m_fileSearchList;
  private Callback<List<File>> m_callback;

  /* Life-cycle methods */

  @Override
  public void onCreate (Bundle savedInstanceState)
  {
    super.onCreate(savedInstanceState);

    OnFileClickListener fileClickListener = (file) ->
    {
      if (!Objects.equal(file.getFormat(), FileConstants.FORMAT_CATEGORY))
      {
        pushFragmentToNavigation(FileFragment.newInstance(file));
      }
    };
    m_adapter = new BrowserRecyclerAdapter(fileClickListener);
  }

  @Nullable
  @Override
  public View onCreateView (LayoutInflater inflater, @Nullable ViewGroup container,
                            @Nullable Bundle savedInstanceState)
  {
    final Context context = getContext();

    /* Setup view. */
    HomeFragmentBinding binding =
        DataBindingUtil.inflate(inflater, R.layout.home_fragment, container, false);
    m_binding = binding;

    binding.extremitiesContainer.setTag(FileConstants.ID_EXTREMITIES);
    binding.subchinContainer.setTag(FileConstants.ID_SUBCHIN);
    binding.sportsmedContainer.setTag(FileConstants.ID_SPORTSMED);

    View.OnClickListener onClickListener = (v) -> {
      int rootID = (int) v.getTag();
      File file = ZimmerServices.getInstance().getFileService().getFile(rootID);
      pushFragmentToNavigation(MainExplorerFragment.newInstance(file));
    };
    binding.extremitiesContainer.setOnClickListener(onClickListener);
    binding.subchinContainer.setOnClickListener(onClickListener);
    binding.sportsmedContainer.setOnClickListener(onClickListener);

    binding.recyclerView.setAdapter(m_adapter);
    binding.recyclerView.setLayoutManager(new LinearLayoutManager(context));
    binding.recyclerView.addItemDecoration(new LinearDividerItemDecoration());

    FadeInUpAnimator animator = new FadeInUpAnimator();
    animator.setAddDuration(350L);
    animator.setChangeDuration(350);
    animator.setInterpolator(new AccelerateDecelerateInterpolator());
    binding.recyclerView.setItemAnimator(animator);

    binding.searchEditText.addTextChangedListener(new SimpleTextWatch()
    {
      @Override
      public void afterTextChanged (Editable editable)
      {
        String text = editable.toString();
        boolean isSearching = !Validation.isEmpty(text);

        if (   isSearching
            && binding.recyclerView.getVisibility() == View.GONE)
        {
          m_binding.recyclerView.setVisibility(View.VISIBLE);
        }
        else if (   !isSearching
                 &&  binding.recyclerView.getVisibility() == View.VISIBLE)
        {
          m_binding.recyclerView.setVisibility(View.GONE);
        }

        searchFile(text);

        getToolbar().setTitle(isSearching ? R.string.search : R.string.home_title);
        int searchVisibility = isSearching ? View.VISIBLE : View.GONE;

        m_binding.searchHeader.getRoot().setVisibility(searchVisibility);
      }
    });

    binding.searchEditText.setOnEditorActionListener((v, actionId, event) ->
    {
      if (actionId == EditorInfo.IME_ACTION_SEARCH)
      {
        hideKeyboard();
        return true;
      }
      return false;
    });

    binding.searchHeader.clearAllTextView.setOnClickListener(v ->
    {
      hideKeyboard();
      binding.searchEditText.setText(null);
    });

    binding.addCategoryImageView.setOnClickListener(
        v -> pushFragmentToNavigation(new CategoriesFragment()));

    HomeCategoryUpdateListener updateListener = (categories) -> updateCategoryView();

    binding.categoryRecyclerView.setAdapter(new HomeCategoryRecyclerAdapter(updateListener));
    binding.categoryRecyclerView.setLayoutManager(new HomeCategoryGridLayoutManager(context));
    binding.categoryRecyclerView.addItemDecoration(new HomeCategoryItemSpaceDecoration());

    Toolbar toolbar = getToolbar();
    toolbar.setTitle(R.string.home_title);

    /* Restore states. */
    if (savedInstanceState != null)
    {
      binding.searchEditText.setText(savedInstanceState.getString(STATE_SEARCH_TEXT, ""));
    }

    return binding.getRoot();
  }

  @Override
  public void onViewCreated (View view, Bundle savedInstanceState)
  {
    super.onViewCreated(view, savedInstanceState);
    updateCategoryView();

    String searchText = m_binding.searchEditText.getText().toString();
    if (!Validation.isEmpty(searchText))
    {
      searchFile(searchText);
    }
  }

  @Override
  public void onSaveInstanceState (Bundle outState)
  {
    super.onSaveInstanceState(outState);

    String searchText = m_binding.searchEditText.getText().toString();
    outState.putString(STATE_SEARCH_TEXT, searchText);
  }

  /* Internal methods */

  private void searchFile (String fileName)
  {
    if (Validation.isEmpty(fileName))
    {
      m_fileSearchList = null;
      m_callback = null;
      updateList();
      return;
    }

    Callback<List<File>> callback = new Callback<List<File>>()
    {
      @Override
      public void onFinished (int status, String message, List<File> data)
      {
        if (this != m_callback)
        {
          return;
        }

        m_fileSearchList = data;
        updateList();
      }
    };
    m_callback = callback;

    List<String> categoryTags = CategoryMetaData.SELECTED_CATEGORIES;
    ZimmerServices.getInstance().getFileService().searchFile(-1, fileName, categoryTags, callback);
  }

  private void updateList ()
  {
    m_adapter.updateDataSet(m_fileSearchList);
  }

  private void updateCategoryView ()
  {
    int size = CategoryMetaData.SELECTED_CATEGORIES.size();
    m_binding.categoryRecyclerView.setVisibility(size == 0 ? View.GONE : View.VISIBLE);
    searchFile(m_binding.searchEditText.getText().toString());
  }
}
